Lesson_2_Reflections

What happens when you initialize a repository? Why do you need to do it?

It creates an empty repository (or file) with the name specified.  You use enter the following - git init (name of repository) then can do a git status to see if it has been set up okay.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the place were your items are initially loaded. They are then moved to the working directory. This helps keeps files in order and prevents changes from being used before they are ready. 

How can you use the staging area to make sure you have one commit per logical change?

If you are making multiple changes to the same file (or document) then you need to add one change at a time to the staging area then commit it then go back and add the next change. If the changes are to multiple files (or documents) and each change is to a different file (or document) then add all of them to the staging area at the same time but only commit one change at a time.   


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you need two or more versions that are basically the same but with specific differences such as one version in English and another version in a different language. You may also want to test out some changes to see if they are really what is wanted without messing up the current version. Or trying to determine which set of changes is what is really wanted. Could do the multiple set of changes and then check out each one to see which one is the one that will be used. 

How do the diagrams help you visualize the branch structure?

It provides an easy way to see how each commit is related to each other and how each branch is related to each other. If the diagram goes back far enough can see at which point the branches split from each other or if there are any commits that can not be reached by one or more of the branches. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The commits (changes) made in both branches will be put together in the branch that is currently checked out. The changes made in the branch that is not checked out will be added to the branch that is checked out. When done the checked out branch will have all of the changes (commits).

It is represented the way it is in the diagram as an easy way to see what is happening. 


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

With automatic merging changes that are not considered to be conflicts will be put together to form a new version of the file (program, etc). You do not have to manually check each group of changes in both areas to determine what should or should not be moved.  You will only need to do this when GIT determines there is a conflict between the changes. 

There could be cases when GIT thinks there is not a conflict but there is which could cause a problem later and at that point the previous changes will need to be compared to see what is causing the problem. 

      

  
  
  


 

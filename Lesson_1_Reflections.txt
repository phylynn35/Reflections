Lesson 1 Reflections

How did viewing a diff between two versions of a file help you see the bug that was introduced?

It does make it easier and quicker to find what could be potentially wrong. Just because there is a difference does not mean that difference is causing the problem. Still need to look at the difference to determine if is it the cause of the problem.


  
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You can see the type of changes that have been made in the past - what has been added, changed, or removed. If you are having to do something that was done previously and then removed you could restore what was done previously instead of spending the time redoing things. It also helps to decrease the amount of time needed to find potential problems and their causes. 



What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?


With automatic saves you may not know for sure when the saves will be done. Does the system do the saves in specific a time frame (such as hourly) or once a certain amount of data has been entered? When an automatic save is done the resulting program may not work. More information is still needed. It could give the impression of there being a problem when there is not. With a manual commit (or save) you can be sure that what is commnitted is all of the changes that are needed for the program to work correctly. It also stops the person from being interrupted due to an automtic save. But the person needs to make sure to do manual commits at the appropriate times or they could loose a lot of their work.



Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

 
I do not know. It was how they decided to set up their systems. Could be that with documents it is not often that multiple documents would be dependent on each other so there would not be a need to save all of them when changes are made to one of them. Since GIT deals more with files there are times when files are dependent on each other. By saving all of them at the same time GIT can be sure that the correct version of the files are always available if there is ever a need to go back to the prior version of one of the files. 


How can you use the commands git log and git diff to view the history of files?

By using git log you can see all of the different versions of the file that have been committed. If comments are descriptive enough they will help identify which version needs to be checked out. Otherwise the date and time will need to be used. To find the changes you need to compare that version with the previous version. The git diff will do that. 




How might using version control make you more confident to make changes that could break something?


If something goes seriously wrong then it will be easier to go back to the previous version that is working. If it is not necessary to reinstall the previous version then a compare can be done to look at the differences and determine which of the differences is causing the problem. Would not be as reluctant to make changes, could also make the changes faster. 


Now that you have your workspace set up, what do you want to try using Git for?

At this time Git will only be used for the classes I am taking at Udacity. 


  


 

   
    